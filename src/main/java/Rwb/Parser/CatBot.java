/* CatBot.java */
/* Generated By:JavaCC: Do not edit this line. CatBot.java */
package Rwb.Parser;

import Rwb.Commands.CatOrganizeBuilder;
import Rwb.Commands.CommandException;
import Rwb.Commands.WikiCommand;
import Rwb.Generators.PageGenerator;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Deque;

public class CatBot extends BotAst implements CatBotConstants {

  public static void main(String args[]) throws ParseException, CommandException {

    CatBot parser = new CatBot(""
            + "searchns(\"main\",0){printtitle();}" +"\n"
            + "searchns(\"main+111+115\",0, 111, 115){printtitle();}" +"\n"
            + "summary(\"Sum outer\");" +"\n"
            + "organize() {" + "\n"
            + "summary(\"Sum inner2\");" +"\n"
            + "[[Vegetarische Rezepte]], [[Suppen]] --> [[Vegetarische Suppe]];" + "\n"
            + "[[Vegetarische Rezepte]], [[Vorspeisen]] --> [[Vegetarische Vorspeise]];" + "\n"
            + "[[Vegetarische Rezepte]], [[Hauptspeisen]] --> [[Vegetarische Hauptspeise]];" + "\n"
            + "[[Vegetarische Rezepte]], [[Hauptspeisen]] <-- [[Vegetarische Hauptspeise]];" + "\n"
            + "}" + "\n"
            + "commit();" + "\n"
            + "recent(100){putintocat(\"Recent\");}" + "\n"
            + "search(\"Canneloni\"){printtitle();}" + "\n"
            + "recent(100){pagelist([[P1]]) {putintocat(\"Recent100P1\");}}" + "\n"
            + "pagelist([[P1]]) {" + "\n"
            + "putintocat(\"Cat1\");" + "\n"
            + "}" + "\n"
            + "pagelist([[P1]], [[P2]]) {" + "\n"
            + "putintocat(\"Cat1\");" + "\n"
            + "putintocat(\"Cat2\");" + "\n"
            + "replace(\"Test(\\\\d{2})\", \"Answer$1\");" + "\n"
            + "}" + "\n"
            + "addexclude(\"<gallery>\",\"</gallery>\");" + "\n"
            + "resetexcludes();" + "\n"
            + "");
    List<WikiCommand> wcl = parser.Input();
      for (WikiCommand wikiCommand : wcl) {
          //wikiCommand.execute(RezepteWiki.buildAndLogin());
          System.out.println(wikiCommand);
      }
  }

/* Parser */
  final public 
List<WikiCommand> Input() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_ORGANIZE:
      case T_CMD:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Generator();
    }
    jj_consume_token(0);
createAndAddCommand(new Token(jj_kind, "commit"), null);
    return cl;
  }

  final public void Generator() throws ParseException {PageGenerator pg = null;
  Deque<Object> pl = null;
  Token command;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_ORGANIZE:{
      jj_consume_token(T_ORGANIZE);
      jj_consume_token(T_LPAREN);
      jj_consume_token(T_RPAREN);
      jj_consume_token(T_LCURL);
      label_2:
      while (true) {
        BlkCommand();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case T_ORGANIZE:
        case T_CMD:
        case T_SCQUOTE:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(T_RCURL);
      break;
      }
    case T_CMD:{
      command = jj_consume_token(T_CMD);
      jj_consume_token(T_LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_INT:
      case T_SQUOTE:
      case T_SCQUOTE:{
        pl = ParameterList();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(T_RPAREN);
createAndAddCommand(command, pl);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_SEMI:{
        jj_consume_token(T_SEMI);
        break;
        }
      case T_LCURL:{
        jj_consume_token(T_LCURL);
        label_3:
        while (true) {
          BlkCommand();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case T_ORGANIZE:
          case T_CMD:
          case T_SCQUOTE:{
            ;
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            break label_3;
          }
        }
        jj_consume_token(T_RCURL);
if (!generatorstack.isEmpty()) generatorstack.removeFirst();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BlkCommand() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_SCQUOTE:{
      CatOrganize();
      break;
      }
    case T_ORGANIZE:
    case T_CMD:{
      Generator();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Deque<Object> ParameterList() throws ParseException {Deque<Object> pl = new ArrayDeque<Object>();
    Parameter(pl);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(T_COMMA);
      Parameter(pl);
    }
return pl;
  }

  final public void Parameter(Deque<Object> pl) throws ParseException {Object result;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_INT:{
      t = jj_consume_token(T_INT);
result = Integer.decode(t.image);
      break;
      }
    case T_SQUOTE:{
      result = string();
      break;
      }
    case T_SCQUOTE:{
      result = Cat();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
pl.add(result);
  }

  final public void CatOrganize() throws ParseException {List<String> c1;
  String c2;
  Token t1;
  CatOrganizeBuilder cb = new CatOrganizeBuilder();
    c1 = CatList();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_RPIPE:{
      t1 = jj_consume_token(T_RPIPE);
      break;
      }
    case T_LPIPE:{
      t1 = jj_consume_token(T_LPIPE);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    c2 = Cat();
    jj_consume_token(T_SEMI);
cb.setSourceParam(c1);
    cb.setDestParam(c2);
    cb.setAddToDestParam((t1.image.equals("-->")));
    cl.add(cb.createCatOrganize());
  }

  final public List<String> CatList() throws ParseException {String s;
  List<String> sl=new ArrayList<String>();
    s = Cat();
sl.add(s);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      jj_consume_token(T_COMMA);
      s = Cat();
sl.add(s);
    }
return sl;
  }

  final public String Cat() throws ParseException {StringBuilder builder = new StringBuilder();
    jj_consume_token(T_SCQUOTE);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_CHAR:
      case T_CCHAR:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      getChar(builder);
    }
    jj_consume_token(T_ECQUOTE);
return builder.toString();
  }

/**
 * Match a quoted string.
 */
  final public String string() throws ParseException {StringBuilder builder = new StringBuilder();
    jj_consume_token(T_SQUOTE);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_CHAR:
      case T_CCHAR:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_7;
      }
      getChar(builder);
    }
    jj_consume_token(T_EQUOTE);
return builder.toString();
  }

/**
 * Match char inside quoted string.
 */
  final public void getChar(StringBuilder builder) throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_CHAR:{
      t = jj_consume_token(T_CHAR);
      break;
      }
    case T_CCHAR:{
      t = jj_consume_token(T_CCHAR);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (t.image.length() < 2)
    {
      // CHAR
      builder.append(t.image.charAt(0));
    }
    else if (t.image.length() < 6)
    {
      // ESC
      char c = t.image.charAt(1);
      switch (c)
      {
/*
	case 'b': builder.append((char) 8); break;
        case 'f': builder.append((char) 12); break;
        case 'n': builder.append((char) 10); break;
        case 'r': builder.append((char) 13); break;
        case 't': builder.append((char) 9); break;
*/
        default: builder.append(c);
      }
    }
  }

  /** Generated Token Manager. */
  public CatBotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x102000,0x502000,0x620000,0x502000,0xa0,0x102000,0x502000,0x40,0x620000,0xc000,0x40,0x5000000,0x5000000,0x5000000,};
   }

  /** Constructor. */
  public CatBot(Provider stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CatBotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CatBot(String dsl) throws ParseException, TokenMgrException {
      this(new StringProvider(dsl));
  }

  public void ReInit(String s) {
     ReInit(new StringProvider(s));
  }
  /** Reinitialise. */
  public void ReInit(Provider stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new CatBotTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CatBot(CatBotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CatBotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage, token_source == null ? null : CatBotTokenManager.lexStateNames[token_source.curLexState]);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
